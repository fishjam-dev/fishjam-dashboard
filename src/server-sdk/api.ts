/* tslint:disable */
/* eslint-disable */
/**
 * Jellyfish Media Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddComponentRequest
 */
export interface AddComponentRequest {
    /**
     * 
     * @type {ComponentOptions}
     * @memberof AddComponentRequest
     */
    'options'?: ComponentOptions | null;
    /**
     * Component type
     * @type {string}
     * @memberof AddComponentRequest
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface AddPeerRequest
 */
export interface AddPeerRequest {
    /**
     * 
     * @type {PeerOptions}
     * @memberof AddPeerRequest
     */
    'options': PeerOptions;
    /**
     * Peer type
     * @type {string}
     * @memberof AddPeerRequest
     */
    'type': string;
}
/**
 * Describes component
 * @export
 * @interface Component
 */
export interface Component {
    /**
     * Assigned component id
     * @type {string}
     * @memberof Component
     */
    'id': string;
    /**
     * 
     * @type {ComponentMetadata}
     * @memberof Component
     */
    'metadata': ComponentMetadata;
    /**
     * Component type
     * @type {string}
     * @memberof Component
     */
    'type': string;
}
/**
 * Response containing component details
 * @export
 * @interface ComponentDetailsResponse
 */
export interface ComponentDetailsResponse {
    /**
     * 
     * @type {Component}
     * @memberof ComponentDetailsResponse
     */
    'data': Component;
}
/**
 * Component-specific metadata
 * @export
 * @interface ComponentMetadata
 */
export interface ComponentMetadata {
    /**
     * 
     * @type {boolean}
     * @memberof ComponentMetadata
     */
    'playable'?: boolean;
}
/**
 * @type ComponentOptions
 * Component-specific options
 * @export
 */
export type ComponentOptions = ComponentOptionsRTSP;

/**
 * Options specific to the RTSP component
 * @export
 * @interface ComponentOptionsRTSP
 */
export interface ComponentOptionsRTSP {
    /**
     * Interval (in ms) in which keep-alive RTSP messages will be sent to the remote stream source
     * @type {number}
     * @memberof ComponentOptionsRTSP
     */
    'keepAliveInterval'?: number;
    /**
     * Whether to attempt to create client-side NAT binding by sending an empty datagram from client to source, after the completion of RTSP setup
     * @type {boolean}
     * @memberof ComponentOptionsRTSP
     */
    'pierceNat'?: boolean;
    /**
     * Delay (in ms) between successive reconnect attempts
     * @type {number}
     * @memberof ComponentOptionsRTSP
     */
    'reconnectDelay'?: number;
    /**
     * Local port RTP stream will be received at
     * @type {number}
     * @memberof ComponentOptionsRTSP
     */
    'rtpPort'?: number;
    /**
     * URI of RTSP source stream
     * @type {string}
     * @memberof ComponentOptionsRTSP
     */
    'sourceUri': string;
}
/**
 * Is delta manifest requested
 * @export
 * @enum {string}
 */

export const HlsSkip = {
    Yes: 'YES'
} as const;

export type HlsSkip = typeof HlsSkip[keyof typeof HlsSkip];


/**
 * Error message
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error details
     * @type {string}
     * @memberof ModelError
     */
    'errors': string;
}
/**
 * Describes peer status
 * @export
 * @interface Peer
 */
export interface Peer {
    /**
     * Assigned peer id
     * @type {string}
     * @memberof Peer
     */
    'id': string;
    /**
     * 
     * @type {PeerStatus}
     * @memberof Peer
     */
    'status': PeerStatus;
    /**
     * Peer type
     * @type {string}
     * @memberof Peer
     */
    'type': string;
}


/**
 * Response containing peer details and their token
 * @export
 * @interface PeerDetailsResponse
 */
export interface PeerDetailsResponse {
    /**
     * 
     * @type {PeerDetailsResponseData}
     * @memberof PeerDetailsResponse
     */
    'data': PeerDetailsResponseData;
}
/**
 * 
 * @export
 * @interface PeerDetailsResponseData
 */
export interface PeerDetailsResponseData {
    /**
     * 
     * @type {Peer}
     * @memberof PeerDetailsResponseData
     */
    'peer': Peer;
    /**
     * Token for authorizing websocket connection
     * @type {string}
     * @memberof PeerDetailsResponseData
     */
    'token': string;
}
/**
 * @type PeerOptions
 * Peer-specific options
 * @export
 */
export type PeerOptions = PeerOptionsWebRTC;

/**
 * Options specific to the WebRTC peer
 * @export
 * @interface PeerOptionsWebRTC
 */
export interface PeerOptionsWebRTC {
    /**
     * Enables the peer to use simulcast
     * @type {boolean}
     * @memberof PeerOptionsWebRTC
     */
    'enableSimulcast'?: boolean;
}
/**
 * Informs about the peer status
 * @export
 * @enum {string}
 */

export const PeerStatus = {
    Connected: 'connected',
    Disconnected: 'disconnected'
} as const;

export type PeerStatus = typeof PeerStatus[keyof typeof PeerStatus];


/**
 * Description of the room state
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {Array<Component>}
     * @memberof Room
     */
    'components': Array<Component>;
    /**
     * 
     * @type {RoomConfig}
     * @memberof Room
     */
    'config': RoomConfig;
    /**
     * Room ID
     * @type {string}
     * @memberof Room
     */
    'id': string;
    /**
     * 
     * @type {Array<Peer>}
     * @memberof Room
     */
    'peers': Array<Peer>;
}
/**
 * Room configuration
 * @export
 * @interface RoomConfig
 */
export interface RoomConfig {
    /**
     * Maximum amount of peers allowed into the room
     * @type {number}
     * @memberof RoomConfig
     */
    'maxPeers'?: number | null;
    /**
     * Enforces video codec for each peer in the room
     * @type {string}
     * @memberof RoomConfig
     */
    'videoCodec'?: RoomConfigVideoCodecEnum;
}

export const RoomConfigVideoCodecEnum = {
    H264: 'h264',
    Vp8: 'vp8'
} as const;

export type RoomConfigVideoCodecEnum = typeof RoomConfigVideoCodecEnum[keyof typeof RoomConfigVideoCodecEnum];

/**
 * Response containing room details
 * @export
 * @interface RoomCreateDetailsResponse
 */
export interface RoomCreateDetailsResponse {
    /**
     * 
     * @type {RoomCreateDetailsResponseData}
     * @memberof RoomCreateDetailsResponse
     */
    'data': RoomCreateDetailsResponseData;
}
/**
 * 
 * @export
 * @interface RoomCreateDetailsResponseData
 */
export interface RoomCreateDetailsResponseData {
    /**
     * Jellyfish instance address where the room was created. This might be different than the address of Jellyfish where the request was sent only when running a cluster of Jellyfishes.
     * @type {string}
     * @memberof RoomCreateDetailsResponseData
     */
    'jellyfish_address': string;
    /**
     * 
     * @type {Room}
     * @memberof RoomCreateDetailsResponseData
     */
    'room': Room;
}
/**
 * Response containing room details
 * @export
 * @interface RoomDetailsResponse
 */
export interface RoomDetailsResponse {
    /**
     * 
     * @type {Room}
     * @memberof RoomDetailsResponse
     */
    'data': Room;
}
/**
 * Response containing list of all rooms
 * @export
 * @interface RoomsListingResponse
 */
export interface RoomsListingResponse {
    /**
     * 
     * @type {Array<Room>}
     * @memberof RoomsListingResponse
     */
    'data': Array<Room>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Send file
         * @param {string} roomId Room id
         * @param {string} filename Name of the file
         * @param {string} [range] Byte range of partial segment
         * @param {number} [hLSMsn] Segment sequence number
         * @param {number} [hLSPart] Partial segment sequence number
         * @param {HlsSkip} [hLSSkip] Is delta manifest requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jellyfishWebHLSControllerIndex: async (roomId: string, filename: string, range?: string, hLSMsn?: number, hLSPart?: number, hLSSkip?: HlsSkip, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('jellyfishWebHLSControllerIndex', 'roomId', roomId)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('jellyfishWebHLSControllerIndex', 'filename', filename)
            const localVarPath = `/hls/{room_id}/{filename}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (hLSMsn !== undefined) {
                localVarQueryParameter['_HLS_msn'] = hLSMsn;
            }

            if (hLSPart !== undefined) {
                localVarQueryParameter['_HLS_part'] = hLSPart;
            }

            if (hLSSkip !== undefined) {
                localVarQueryParameter['_HLS_skip'] = hLSSkip;
            }

            if (range != null) {
                localVarHeaderParameter['range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Send file
         * @param {string} roomId Room id
         * @param {string} filename Name of the file
         * @param {string} [range] Byte range of partial segment
         * @param {number} [hLSMsn] Segment sequence number
         * @param {number} [hLSPart] Partial segment sequence number
         * @param {HlsSkip} [hLSSkip] Is delta manifest requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jellyfishWebHLSControllerIndex(roomId: string, filename: string, range?: string, hLSMsn?: number, hLSPart?: number, hLSSkip?: HlsSkip, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jellyfishWebHLSControllerIndex(roomId, filename, range, hLSMsn, hLSPart, hLSSkip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Send file
         * @param {string} roomId Room id
         * @param {string} filename Name of the file
         * @param {string} [range] Byte range of partial segment
         * @param {number} [hLSMsn] Segment sequence number
         * @param {number} [hLSPart] Partial segment sequence number
         * @param {HlsSkip} [hLSSkip] Is delta manifest requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jellyfishWebHLSControllerIndex(roomId: string, filename: string, range?: string, hLSMsn?: number, hLSPart?: number, hLSSkip?: HlsSkip, options?: any): AxiosPromise<string> {
            return localVarFp.jellyfishWebHLSControllerIndex(roomId, filename, range, hLSMsn, hLSPart, hLSSkip, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Send file
     * @param {string} roomId Room id
     * @param {string} filename Name of the file
     * @param {string} [range] Byte range of partial segment
     * @param {number} [hLSMsn] Segment sequence number
     * @param {number} [hLSPart] Partial segment sequence number
     * @param {HlsSkip} [hLSSkip] Is delta manifest requested
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public jellyfishWebHLSControllerIndex(roomId: string, filename: string, range?: string, hLSMsn?: number, hLSPart?: number, hLSSkip?: HlsSkip, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).jellyfishWebHLSControllerIndex(roomId, filename, range, hLSMsn, hLSPart, hLSSkip, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoomApi - axios parameter creator
 * @export
 */
export const RoomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates the component and adds it to the room
         * @param {string} roomId Room ID
         * @param {AddComponentRequest} [addComponentRequest] Component config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComponent: async (roomId: string, addComponentRequest?: AddComponentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('addComponent', 'roomId', roomId)
            const localVarPath = `/room/{room_id}/component`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addComponentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create peer
         * @param {string} roomId Room id
         * @param {AddPeerRequest} [addPeerRequest] Peer specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeer: async (roomId: string, addPeerRequest?: AddPeerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('addPeer', 'roomId', roomId)
            const localVarPath = `/room/{room_id}/peer`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPeerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a room
         * @param {RoomConfig} [roomConfig] Room configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom: async (roomConfig?: RoomConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the component from the room
         * @param {string} roomId Room ID
         * @param {string} id Component ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComponent: async (roomId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deleteComponent', 'roomId', roomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteComponent', 'id', id)
            const localVarPath = `/room/{room_id}/component/{id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete peer
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeer: async (roomId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deletePeer', 'roomId', roomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePeer', 'id', id)
            const localVarPath = `/room/{room_id}/peer/{id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the room
         * @param {string} roomId Room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deleteRoom', 'roomId', roomId)
            const localVarPath = `/room/{room_id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show information about all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRooms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Shows information about the room
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getRoom', 'roomId', roomId)
            const localVarPath = `/room/{room_id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomApi - functional programming interface
 * @export
 */
export const RoomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates the component and adds it to the room
         * @param {string} roomId Room ID
         * @param {AddComponentRequest} [addComponentRequest] Component config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addComponent(roomId: string, addComponentRequest?: AddComponentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComponentDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addComponent(roomId, addComponentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create peer
         * @param {string} roomId Room id
         * @param {AddPeerRequest} [addPeerRequest] Peer specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPeer(roomId: string, addPeerRequest?: AddPeerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPeer(roomId, addPeerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a room
         * @param {RoomConfig} [roomConfig] Room configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoom(roomConfig?: RoomConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomCreateDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoom(roomConfig, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the component from the room
         * @param {string} roomId Room ID
         * @param {string} id Component ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteComponent(roomId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteComponent(roomId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete peer
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePeer(roomId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePeer(roomId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the room
         * @param {string} roomId Room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoom(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoom(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show information about all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRooms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomsListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRooms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Shows information about the room
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoom(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoom(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomApi - factory interface
 * @export
 */
export const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates the component and adds it to the room
         * @param {string} roomId Room ID
         * @param {AddComponentRequest} [addComponentRequest] Component config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComponent(roomId: string, addComponentRequest?: AddComponentRequest, options?: any): AxiosPromise<ComponentDetailsResponse> {
            return localVarFp.addComponent(roomId, addComponentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create peer
         * @param {string} roomId Room id
         * @param {AddPeerRequest} [addPeerRequest] Peer specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeer(roomId: string, addPeerRequest?: AddPeerRequest, options?: any): AxiosPromise<PeerDetailsResponse> {
            return localVarFp.addPeer(roomId, addPeerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a room
         * @param {RoomConfig} [roomConfig] Room configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom(roomConfig?: RoomConfig, options?: any): AxiosPromise<RoomCreateDetailsResponse> {
            return localVarFp.createRoom(roomConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the component from the room
         * @param {string} roomId Room ID
         * @param {string} id Component ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComponent(roomId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteComponent(roomId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete peer
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeer(roomId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePeer(roomId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the room
         * @param {string} roomId Room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom(roomId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show information about all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRooms(options?: any): AxiosPromise<RoomsListingResponse> {
            return localVarFp.getAllRooms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Shows information about the room
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom(roomId: string, options?: any): AxiosPromise<RoomDetailsResponse> {
            return localVarFp.getRoom(roomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export class RoomApi extends BaseAPI {
    /**
     * 
     * @summary Creates the component and adds it to the room
     * @param {string} roomId Room ID
     * @param {AddComponentRequest} [addComponentRequest] Component config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public addComponent(roomId: string, addComponentRequest?: AddComponentRequest, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).addComponent(roomId, addComponentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create peer
     * @param {string} roomId Room id
     * @param {AddPeerRequest} [addPeerRequest] Peer specification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public addPeer(roomId: string, addPeerRequest?: AddPeerRequest, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).addPeer(roomId, addPeerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a room
     * @param {RoomConfig} [roomConfig] Room configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public createRoom(roomConfig?: RoomConfig, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).createRoom(roomConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the component from the room
     * @param {string} roomId Room ID
     * @param {string} id Component ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public deleteComponent(roomId: string, id: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).deleteComponent(roomId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete peer
     * @param {string} roomId Room ID
     * @param {string} id Peer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public deletePeer(roomId: string, id: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).deletePeer(roomId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the room
     * @param {string} roomId Room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public deleteRoom(roomId: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).deleteRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show information about all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public getAllRooms(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).getAllRooms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Shows information about the room
     * @param {string} roomId Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public getRoom(roomId: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).getRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }
}


