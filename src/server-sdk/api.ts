/* tslint:disable */
/* eslint-disable */
/**
 * Fishjam Media Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.6.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddComponentRequest
 */
export interface AddComponentRequest {
    /**
     * 
     * @type {ComponentOptions}
     * @memberof AddComponentRequest
     */
    'options'?: ComponentOptions;
    /**
     * Component type
     * @type {string}
     * @memberof AddComponentRequest
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface AddPeerRequest
 */
export interface AddPeerRequest {
    /**
     * 
     * @type {PeerOptions}
     * @memberof AddPeerRequest
     */
    'options': PeerOptions;
    /**
     * Peer type
     * @type {string}
     * @memberof AddPeerRequest
     */
    'type': string;
}
/**
 * @type Component
 * Describes component
 * @export
 */
export type Component = { type: 'file' } & ComponentFile | { type: 'hls' } & ComponentHLS | { type: 'recording' } & ComponentRecording | { type: 'rtsp' } & ComponentRTSP | { type: 'sip' } & ComponentSIP;

/**
 * Response containing component details
 * @export
 * @interface ComponentDetailsResponse
 */
export interface ComponentDetailsResponse {
    /**
     * 
     * @type {Component}
     * @memberof ComponentDetailsResponse
     */
    'data': Component;
}
/**
 * Describes the File component
 * @export
 * @interface ComponentFile
 */
export interface ComponentFile {
    /**
     * Assigned component ID
     * @type {string}
     * @memberof ComponentFile
     */
    'id': string;
    /**
     * 
     * @type {ComponentPropertiesFile}
     * @memberof ComponentFile
     */
    'properties'?: ComponentPropertiesFile;
    /**
     * List of all component\'s tracks
     * @type {Array<Track>}
     * @memberof ComponentFile
     */
    'tracks': Array<Track>;
    /**
     * Component type
     * @type {string}
     * @memberof ComponentFile
     */
    'type': string;
}
/**
 * Describes the HLS component
 * @export
 * @interface ComponentHLS
 */
export interface ComponentHLS {
    /**
     * Assigned component ID
     * @type {string}
     * @memberof ComponentHLS
     */
    'id': string;
    /**
     * 
     * @type {ComponentPropertiesHLS}
     * @memberof ComponentHLS
     */
    'properties': ComponentPropertiesHLS;
    /**
     * List of all component\'s tracks
     * @type {Array<Track>}
     * @memberof ComponentHLS
     */
    'tracks': Array<Track>;
    /**
     * Component type
     * @type {string}
     * @memberof ComponentHLS
     */
    'type': string;
}
/**
 * @type ComponentOptions
 * Component-specific options
 * @export
 */
export type ComponentOptions = ComponentOptionsFile | ComponentOptionsHLS | ComponentOptionsRTSP | ComponentOptionsRecording | ComponentOptionsSIP;

/**
 * Options specific to the File component
 * @export
 * @interface ComponentOptionsFile
 */
export interface ComponentOptionsFile {
    /**
     * Path to track file. Must be either OPUS encapsulated in Ogg or raw h264
     * @type {string}
     * @memberof ComponentOptionsFile
     */
    'filePath': string;
    /**
     * Framerate of video in a file. It is only valid for video track
     * @type {number}
     * @memberof ComponentOptionsFile
     */
    'framerate'?: number | null;
}
/**
 * Options specific to the HLS component
 * @export
 * @interface ComponentOptionsHLS
 */
export interface ComponentOptionsHLS {
    /**
     * Whether the component should use LL-HLS
     * @type {boolean}
     * @memberof ComponentOptionsHLS
     */
    'lowLatency'?: boolean;
    /**
     * Whether the video is stored after end of stream
     * @type {boolean}
     * @memberof ComponentOptionsHLS
     */
    'persistent'?: boolean;
    /**
     * 
     * @type {ComponentOptionsRecordingCredentials}
     * @memberof ComponentOptionsHLS
     */
    's3'?: ComponentOptionsRecordingCredentials | null;
    /**
     * Whether the HLS component should subscribe to tracks automatically or manually.
     * @type {string}
     * @memberof ComponentOptionsHLS
     */
    'subscribeMode'?: ComponentOptionsHLSSubscribeModeEnum;
    /**
     * Duration of stream available for viewer
     * @type {number}
     * @memberof ComponentOptionsHLS
     */
    'targetWindowDuration'?: number | null;
}

export const ComponentOptionsHLSSubscribeModeEnum = {
    Auto: 'auto',
    Manual: 'manual'
} as const;

export type ComponentOptionsHLSSubscribeModeEnum = typeof ComponentOptionsHLSSubscribeModeEnum[keyof typeof ComponentOptionsHLSSubscribeModeEnum];

/**
 * Options specific to the RTSP component
 * @export
 * @interface ComponentOptionsRTSP
 */
export interface ComponentOptionsRTSP {
    /**
     * Interval (in ms) in which keep-alive RTSP messages will be sent to the remote stream source
     * @type {number}
     * @memberof ComponentOptionsRTSP
     */
    'keepAliveInterval'?: number;
    /**
     * Whether to attempt to create client-side NAT binding by sending an empty datagram from client to source, after the completion of RTSP setup
     * @type {boolean}
     * @memberof ComponentOptionsRTSP
     */
    'pierceNat'?: boolean;
    /**
     * Delay (in ms) between successive reconnect attempts
     * @type {number}
     * @memberof ComponentOptionsRTSP
     */
    'reconnectDelay'?: number;
    /**
     * Local port RTP stream will be received at
     * @type {number}
     * @memberof ComponentOptionsRTSP
     */
    'rtpPort'?: number;
    /**
     * URI of RTSP source stream
     * @type {string}
     * @memberof ComponentOptionsRTSP
     */
    'sourceUri': string;
}
/**
 * Options specific to the Recording component
 * @export
 * @interface ComponentOptionsRecording
 */
export interface ComponentOptionsRecording {
    /**
     * 
     * @type {ComponentOptionsRecordingCredentials}
     * @memberof ComponentOptionsRecording
     */
    'credentials'?: ComponentOptionsRecordingCredentials | null;
    /**
     * Path prefix under which all recording are stored
     * @type {string}
     * @memberof ComponentOptionsRecording
     */
    'pathPrefix'?: string | null;
    /**
     * Whether the Recording component should subscribe to tracks automatically or manually.
     * @type {string}
     * @memberof ComponentOptionsRecording
     */
    'subscribeMode'?: ComponentOptionsRecordingSubscribeModeEnum;
}

export const ComponentOptionsRecordingSubscribeModeEnum = {
    Auto: 'auto',
    Manual: 'manual'
} as const;

export type ComponentOptionsRecordingSubscribeModeEnum = typeof ComponentOptionsRecordingSubscribeModeEnum[keyof typeof ComponentOptionsRecordingSubscribeModeEnum];

/**
 * @type ComponentOptionsRecordingCredentials
 * Credentials to AWS S3 bucket.
 * @export
 */
export type ComponentOptionsRecordingCredentials = S3Credentials;

/**
 * Options specific to the SIP component
 * @export
 * @interface ComponentOptionsSIP
 */
export interface ComponentOptionsSIP {
    /**
     * 
     * @type {SIPCredentials1}
     * @memberof ComponentOptionsSIP
     */
    'registrarCredentials': SIPCredentials1;
}
/**
 * Properties specific to the File component
 * @export
 * @interface ComponentPropertiesFile
 */
export interface ComponentPropertiesFile {
    /**
     * Relative path to track file. Must be either OPUS encapsulated in Ogg or raw h264
     * @type {string}
     * @memberof ComponentPropertiesFile
     */
    'filePath': string;
    /**
     * Framerate of video in a file. It is only valid for video track
     * @type {number}
     * @memberof ComponentPropertiesFile
     */
    'framerate': number | null;
}
/**
 * Properties specific to the HLS component
 * @export
 * @interface ComponentPropertiesHLS
 */
export interface ComponentPropertiesHLS {
    /**
     * Whether the component uses LL-HLS
     * @type {boolean}
     * @memberof ComponentPropertiesHLS
     */
    'lowLatency': boolean;
    /**
     * Whether the video is stored after end of stream
     * @type {boolean}
     * @memberof ComponentPropertiesHLS
     */
    'persistent': boolean;
    /**
     * Whether the generated HLS playlist is playable
     * @type {boolean}
     * @memberof ComponentPropertiesHLS
     */
    'playable': boolean;
    /**
     * Whether the HLS component should subscribe to tracks automatically or manually
     * @type {string}
     * @memberof ComponentPropertiesHLS
     */
    'subscribeMode': ComponentPropertiesHLSSubscribeModeEnum;
    /**
     * Duration of stream available for viewer
     * @type {number}
     * @memberof ComponentPropertiesHLS
     */
    'targetWindowDuration': number | null;
}

export const ComponentPropertiesHLSSubscribeModeEnum = {
    Auto: 'auto',
    Manual: 'manual'
} as const;

export type ComponentPropertiesHLSSubscribeModeEnum = typeof ComponentPropertiesHLSSubscribeModeEnum[keyof typeof ComponentPropertiesHLSSubscribeModeEnum];

/**
 * Properties specific to the RTSP component
 * @export
 * @interface ComponentPropertiesRTSP
 */
export interface ComponentPropertiesRTSP {
    /**
     * Interval (in ms) in which keep-alive RTSP messages will be sent to the remote stream source
     * @type {number}
     * @memberof ComponentPropertiesRTSP
     */
    'keepAliveInterval': number;
    /**
     * Whether to attempt to create client-side NAT binding by sending an empty datagram from client to source, after the completion of RTSP setup
     * @type {boolean}
     * @memberof ComponentPropertiesRTSP
     */
    'pierceNat': boolean;
    /**
     * Delay (in ms) between successive reconnect attempts
     * @type {number}
     * @memberof ComponentPropertiesRTSP
     */
    'reconnectDelay': number;
    /**
     * Local port RTP stream will be received at
     * @type {number}
     * @memberof ComponentPropertiesRTSP
     */
    'rtpPort': number;
    /**
     * URI of RTSP source stream
     * @type {string}
     * @memberof ComponentPropertiesRTSP
     */
    'sourceUri': string;
}
/**
 * Properties specific to the Recording component
 * @export
 * @interface ComponentPropertiesRecording
 */
export interface ComponentPropertiesRecording {
    /**
     * Whether the Recording component should subscribe to tracks automatically or manually
     * @type {string}
     * @memberof ComponentPropertiesRecording
     */
    'subscribeMode': ComponentPropertiesRecordingSubscribeModeEnum;
}

export const ComponentPropertiesRecordingSubscribeModeEnum = {
    Auto: 'auto',
    Manual: 'manual'
} as const;

export type ComponentPropertiesRecordingSubscribeModeEnum = typeof ComponentPropertiesRecordingSubscribeModeEnum[keyof typeof ComponentPropertiesRecordingSubscribeModeEnum];

/**
 * Properties specific to the SIP component
 * @export
 * @interface ComponentPropertiesSIP
 */
export interface ComponentPropertiesSIP {
    /**
     * 
     * @type {SIPCredentials1}
     * @memberof ComponentPropertiesSIP
     */
    'registrarCredentials': SIPCredentials1;
}
/**
 * Describes the RTSP component
 * @export
 * @interface ComponentRTSP
 */
export interface ComponentRTSP {
    /**
     * Assigned component ID
     * @type {string}
     * @memberof ComponentRTSP
     */
    'id': string;
    /**
     * 
     * @type {ComponentPropertiesRTSP}
     * @memberof ComponentRTSP
     */
    'properties': ComponentPropertiesRTSP;
    /**
     * List of all component\'s tracks
     * @type {Array<Track>}
     * @memberof ComponentRTSP
     */
    'tracks': Array<Track>;
    /**
     * Component type
     * @type {string}
     * @memberof ComponentRTSP
     */
    'type': string;
}
/**
 * Describes the Recording component
 * @export
 * @interface ComponentRecording
 */
export interface ComponentRecording {
    /**
     * Assigned component ID
     * @type {string}
     * @memberof ComponentRecording
     */
    'id': string;
    /**
     * 
     * @type {ComponentPropertiesRecording}
     * @memberof ComponentRecording
     */
    'properties': ComponentPropertiesRecording;
    /**
     * List of all component\'s tracks
     * @type {Array<Track>}
     * @memberof ComponentRecording
     */
    'tracks': Array<Track>;
    /**
     * Component type
     * @type {string}
     * @memberof ComponentRecording
     */
    'type': string;
}
/**
 * Describes the SIP component
 * @export
 * @interface ComponentSIP
 */
export interface ComponentSIP {
    /**
     * Assigned component ID
     * @type {string}
     * @memberof ComponentSIP
     */
    'id': string;
    /**
     * 
     * @type {ComponentPropertiesSIP}
     * @memberof ComponentSIP
     */
    'properties': ComponentPropertiesSIP;
    /**
     * List of all component\'s tracks
     * @type {Array<Track>}
     * @memberof ComponentSIP
     */
    'tracks': Array<Track>;
    /**
     * Component type
     * @type {string}
     * @memberof ComponentSIP
     */
    'type': string;
}
/**
 * Dial config
 * @export
 * @interface DialConfig
 */
export interface DialConfig {
    /**
     * Phone number on which SIP Component will call
     * @type {string}
     * @memberof DialConfig
     */
    'phoneNumber'?: string;
}
/**
 * Describes overall Fishjam health
 * @export
 * @interface HealthReport
 */
export interface HealthReport {
    /**
     * 
     * @type {HealthReportDistribution}
     * @memberof HealthReport
     */
    'distribution': HealthReportDistribution;
    /**
     * Commit hash of the build
     * @type {string}
     * @memberof HealthReport
     */
    'gitCommit': string;
    /**
     * 
     * @type {HealthReportStatus}
     * @memberof HealthReport
     */
    'status': HealthReportStatus;
    /**
     * Uptime of Fishjam (in seconds)
     * @type {number}
     * @memberof HealthReport
     */
    'uptime': number;
    /**
     * Version of Fishjam
     * @type {string}
     * @memberof HealthReport
     */
    'version': string;
}


/**
 * Informs about the status of Fishjam distribution
 * @export
 * @interface HealthReportDistribution
 */
export interface HealthReportDistribution {
    /**
     * Whether distribution is enabled on this Fishjam
     * @type {boolean}
     * @memberof HealthReportDistribution
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {HealthReportStatus}
     * @memberof HealthReportDistribution
     */
    'nodeStatus': HealthReportStatus;
    /**
     * Amount of nodes (including this Fishjam\'s node) in the distribution cluster
     * @type {number}
     * @memberof HealthReportDistribution
     */
    'nodesInCluster': number;
}


/**
 * Informs about the status of Fishjam or a specific service
 * @export
 * @enum {string}
 */

export const HealthReportStatus = {
    Up: 'UP',
    Down: 'DOWN'
} as const;

export type HealthReportStatus = typeof HealthReportStatus[keyof typeof HealthReportStatus];


/**
 * Response containing health report of Fishjam
 * @export
 * @interface HealthcheckResponse
 */
export interface HealthcheckResponse {
    /**
     * 
     * @type {HealthReport}
     * @memberof HealthcheckResponse
     */
    'data': HealthReport;
}
/**
 * Error message
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error details
     * @type {string}
     * @memberof ModelError
     */
    'errors': string;
}
/**
 * Describes peer status
 * @export
 * @interface Peer
 */
export interface Peer {
    /**
     * Assigned peer id
     * @type {string}
     * @memberof Peer
     */
    'id': string;
    /**
     * Custom metadata set by the peer
     * @type {any}
     * @memberof Peer
     */
    'metadata': any | null;
    /**
     * 
     * @type {PeerStatus}
     * @memberof Peer
     */
    'status': PeerStatus;
    /**
     * List of all peer\'s tracks
     * @type {Array<Track>}
     * @memberof Peer
     */
    'tracks': Array<Track>;
    /**
     * Peer type
     * @type {string}
     * @memberof Peer
     */
    'type': string;
}


/**
 * Response containing peer details and their token
 * @export
 * @interface PeerDetailsResponse
 */
export interface PeerDetailsResponse {
    /**
     * 
     * @type {PeerDetailsResponseData}
     * @memberof PeerDetailsResponse
     */
    'data': PeerDetailsResponseData;
}
/**
 * 
 * @export
 * @interface PeerDetailsResponseData
 */
export interface PeerDetailsResponseData {
    /**
     * 
     * @type {Peer}
     * @memberof PeerDetailsResponseData
     */
    'peer': Peer;
    /**
     * Websocket URL to which peer has to connect
     * @type {string}
     * @memberof PeerDetailsResponseData
     */
    'peer_websocket_url'?: string;
    /**
     * Token for authorizing websocket connection
     * @type {string}
     * @memberof PeerDetailsResponseData
     */
    'token': string;
}
/**
 * @type PeerOptions
 * Peer-specific options
 * @export
 */
export type PeerOptions = PeerOptionsWebRTC;

/**
 * Options specific to the WebRTC peer
 * @export
 * @interface PeerOptionsWebRTC
 */
export interface PeerOptionsWebRTC {
    /**
     * Enables the peer to use simulcast
     * @type {boolean}
     * @memberof PeerOptionsWebRTC
     */
    'enableSimulcast'?: boolean;
}
/**
 * Informs about the peer status
 * @export
 * @enum {string}
 */

export const PeerStatus = {
    Connected: 'connected',
    Disconnected: 'disconnected'
} as const;

export type PeerStatus = typeof PeerStatus[keyof typeof PeerStatus];


/**
 * Response containing list of all recording
 * @export
 * @interface RecordingListResponse
 */
export interface RecordingListResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof RecordingListResponse
     */
    'data': Array<string>;
}
/**
 * Description of the room state
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * List of all components
     * @type {Array<Component>}
     * @memberof Room
     */
    'components': Array<Component>;
    /**
     * 
     * @type {RoomConfig}
     * @memberof Room
     */
    'config': RoomConfig;
    /**
     * Room ID
     * @type {string}
     * @memberof Room
     */
    'id': string;
    /**
     * List of all peers
     * @type {Array<Peer>}
     * @memberof Room
     */
    'peers': Array<Peer>;
}
/**
 * Room configuration
 * @export
 * @interface RoomConfig
 */
export interface RoomConfig {
    /**
     * Maximum amount of peers allowed into the room
     * @type {number}
     * @memberof RoomConfig
     */
    'maxPeers'?: number | null;
    /**
     * Duration (in seconds) after which the peer will be removed if it is disconnected. If not provided, this feature is disabled.
     * @type {number}
     * @memberof RoomConfig
     */
    'peerDisconnectedTimeout'?: number | null;
    /**
     * Duration (in seconds) after which the room will be removed if no peers are connected. If not provided, this feature is disabled.
     * @type {number}
     * @memberof RoomConfig
     */
    'peerlessPurgeTimeout'?: number | null;
    /**
     * Custom id used for identifying room within Fishjam. Must be unique across all rooms. If not provided, random UUID is generated.
     * @type {string}
     * @memberof RoomConfig
     */
    'roomId'?: string | null;
    /**
     * Enforces video codec for each peer in the room
     * @type {string}
     * @memberof RoomConfig
     */
    'videoCodec'?: RoomConfigVideoCodecEnum;
    /**
     * URL where Fishjam notifications will be sent
     * @type {string}
     * @memberof RoomConfig
     */
    'webhookUrl'?: string | null;
}

export const RoomConfigVideoCodecEnum = {
    H264: 'h264',
    Vp8: 'vp8'
} as const;

export type RoomConfigVideoCodecEnum = typeof RoomConfigVideoCodecEnum[keyof typeof RoomConfigVideoCodecEnum];

/**
 * Response containing room details
 * @export
 * @interface RoomCreateDetailsResponse
 */
export interface RoomCreateDetailsResponse {
    /**
     * 
     * @type {RoomCreateDetailsResponseData}
     * @memberof RoomCreateDetailsResponse
     */
    'data': RoomCreateDetailsResponseData;
}
/**
 * 
 * @export
 * @interface RoomCreateDetailsResponseData
 */
export interface RoomCreateDetailsResponseData {
    /**
     * Fishjam instance address where the room was created. This might be different than the address of Fishjam where the request was sent only when running a cluster of Fishjams.
     * @type {string}
     * @memberof RoomCreateDetailsResponseData
     */
    'fishjam_address': string;
    /**
     * 
     * @type {Room}
     * @memberof RoomCreateDetailsResponseData
     */
    'room': Room;
}
/**
 * Response containing room details
 * @export
 * @interface RoomDetailsResponse
 */
export interface RoomDetailsResponse {
    /**
     * 
     * @type {Room}
     * @memberof RoomDetailsResponse
     */
    'data': Room;
}
/**
 * Response containing list of all rooms
 * @export
 * @interface RoomsListingResponse
 */
export interface RoomsListingResponse {
    /**
     * 
     * @type {Array<Room>}
     * @memberof RoomsListingResponse
     */
    'data': Array<Room>;
}
/**
 * An AWS S3 credential that will be used to send HLS stream. The stream will only be uploaded if credentials are provided
 * @export
 * @interface S3Credentials
 */
export interface S3Credentials {
    /**
     * An AWS access key identifier, linked to your AWS account.
     * @type {string}
     * @memberof S3Credentials
     */
    'accessKeyId': string;
    /**
     * The name of the S3 bucket where your data will be stored.
     * @type {string}
     * @memberof S3Credentials
     */
    'bucket': string;
    /**
     * The AWS region where your bucket is located.
     * @type {string}
     * @memberof S3Credentials
     */
    'region': string;
    /**
     * The secret key that is linked to the Access Key ID.
     * @type {string}
     * @memberof S3Credentials
     */
    'secretAccessKey': string;
}
/**
 * Credentials used to authorize in SIP Provider service
 * @export
 * @interface SIPCredentials
 */
export interface SIPCredentials {
    /**
     * SIP provider address. Can be in the form of FQDN (my-sip-registrar.net) or IPv4 (1.2.3.4). Port can be specified e.g: 5.6.7.8:9999. If not given, the default SIP port `5060` will be assumed
     * @type {string}
     * @memberof SIPCredentials
     */
    'address': string;
    /**
     * Password in SIP service provider
     * @type {string}
     * @memberof SIPCredentials
     */
    'password': string;
    /**
     * Username in SIP service provider
     * @type {string}
     * @memberof SIPCredentials
     */
    'username': string;
}
/**
 * Credentials used to authorize in SIP Provider service
 * @export
 * @interface SIPCredentials1
 */
export interface SIPCredentials1 {
    /**
     * SIP provider address. Can be in the form of FQDN (my-sip-registrar.net) or IPv4 (1.2.3.4). Port can be specified e.g: 5.6.7.8:9999. If not given, the default SIP port `5060` will be assumed
     * @type {string}
     * @memberof SIPCredentials1
     */
    'address': string;
    /**
     * Password in SIP service provider
     * @type {string}
     * @memberof SIPCredentials1
     */
    'password': string;
    /**
     * Username in SIP service provider
     * @type {string}
     * @memberof SIPCredentials1
     */
    'username': string;
}
/**
 * Subscription config
 * @export
 * @interface SubscriptionConfig
 */
export interface SubscriptionConfig {
    /**
     * List of peers and components ids whose tracks the HLS endpoint will subscribe to
     * @type {Array<string>}
     * @memberof SubscriptionConfig
     */
    'origins'?: Array<string>;
}
/**
 * Describes media track of a Peer or Component
 * @export
 * @interface Track
 */
export interface Track {
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    'id'?: string;
    /**
     * 
     * @type {any}
     * @memberof Track
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof Track
     */
    'type'?: TrackTypeEnum;
}

export const TrackTypeEnum = {
    Audio: 'audio',
    Video: 'video'
} as const;

export type TrackTypeEnum = typeof TrackTypeEnum[keyof typeof TrackTypeEnum];


/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Describes the health of Fishjam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Describes the health of Fishjam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthcheck(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthcheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthcheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @summary Describes the health of Fishjam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthcheck(options?: any): AxiosPromise<HealthcheckResponse> {
            return localVarFp.healthcheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @summary Describes the health of Fishjam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthcheck(options?: AxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthcheck(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HlsApi - axios parameter creator
 * @export
 */
export const HlsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve HLS Content
         * @param {string} roomId Room id
         * @param {string} filename Name of the file
         * @param {string} [range] Byte range of partial segment
         * @param {number} [hLSMsn] Segment sequence number
         * @param {number} [hLSPart] Partial segment sequence number
         * @param {string} [hLSSkip] Is delta manifest requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsContent: async (roomId: string, filename: string, range?: string, hLSMsn?: number, hLSPart?: number, hLSSkip?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getHlsContent', 'roomId', roomId)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('getHlsContent', 'filename', filename)
            const localVarPath = `/hls/{room_id}/{filename}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hLSMsn !== undefined) {
                localVarQueryParameter['_HLS_msn'] = hLSMsn;
            }

            if (hLSPart !== undefined) {
                localVarQueryParameter['_HLS_part'] = hLSPart;
            }

            if (hLSSkip !== undefined) {
                localVarQueryParameter['_HLS_skip'] = hLSSkip;
            }

            if (range != null) {
                localVarHeaderParameter['range'] = String(range);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HlsApi - functional programming interface
 * @export
 */
export const HlsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HlsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve HLS Content
         * @param {string} roomId Room id
         * @param {string} filename Name of the file
         * @param {string} [range] Byte range of partial segment
         * @param {number} [hLSMsn] Segment sequence number
         * @param {number} [hLSPart] Partial segment sequence number
         * @param {string} [hLSSkip] Is delta manifest requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHlsContent(roomId: string, filename: string, range?: string, hLSMsn?: number, hLSPart?: number, hLSSkip?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHlsContent(roomId, filename, range, hLSMsn, hLSPart, hLSSkip, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HlsApi - factory interface
 * @export
 */
export const HlsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HlsApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve HLS Content
         * @param {string} roomId Room id
         * @param {string} filename Name of the file
         * @param {string} [range] Byte range of partial segment
         * @param {number} [hLSMsn] Segment sequence number
         * @param {number} [hLSPart] Partial segment sequence number
         * @param {string} [hLSSkip] Is delta manifest requested
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHlsContent(roomId: string, filename: string, range?: string, hLSMsn?: number, hLSPart?: number, hLSSkip?: string, options?: any): AxiosPromise<string> {
            return localVarFp.getHlsContent(roomId, filename, range, hLSMsn, hLSPart, hLSSkip, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HlsApi - object-oriented interface
 * @export
 * @class HlsApi
 * @extends {BaseAPI}
 */
export class HlsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve HLS Content
     * @param {string} roomId Room id
     * @param {string} filename Name of the file
     * @param {string} [range] Byte range of partial segment
     * @param {number} [hLSMsn] Segment sequence number
     * @param {number} [hLSPart] Partial segment sequence number
     * @param {string} [hLSSkip] Is delta manifest requested
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HlsApi
     */
    public getHlsContent(roomId: string, filename: string, range?: string, hLSMsn?: number, hLSPart?: number, hLSSkip?: string, options?: AxiosRequestConfig) {
        return HlsApiFp(this.configuration).getHlsContent(roomId, filename, range, hLSMsn, hLSPart, hLSSkip, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecordingApi - axios parameter creator
 * @export
 */
export const RecordingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deletes the recording
         * @param {string} recordingId Recording id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecording: async (recordingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordingId' is not null or undefined
            assertParamExists('deleteRecording', 'recordingId', recordingId)
            const localVarPath = `/recording/{recording_id}`
                .replace(`{${"recording_id"}}`, encodeURIComponent(String(recordingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Recording (HLS) Content
         * @param {string} recordingId Recording id
         * @param {string} filename Name of the file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordingContent: async (recordingId: string, filename: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordingId' is not null or undefined
            assertParamExists('getRecordingContent', 'recordingId', recordingId)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('getRecordingContent', 'filename', filename)
            const localVarPath = `/recording/{recording_id}/{filename}`
                .replace(`{${"recording_id"}}`, encodeURIComponent(String(recordingId)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Lists all available recordings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recording`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordingApi - functional programming interface
 * @export
 */
export const RecordingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecordingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deletes the recording
         * @param {string} recordingId Recording id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecording(recordingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecording(recordingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Recording (HLS) Content
         * @param {string} recordingId Recording id
         * @param {string} filename Name of the file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordingContent(recordingId: string, filename: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordingContent(recordingId, filename, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Lists all available recordings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordingListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecordingApi - factory interface
 * @export
 */
export const RecordingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecordingApiFp(configuration)
    return {
        /**
         * 
         * @summary Deletes the recording
         * @param {string} recordingId Recording id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecording(recordingId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRecording(recordingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Recording (HLS) Content
         * @param {string} recordingId Recording id
         * @param {string} filename Name of the file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordingContent(recordingId: string, filename: string, options?: any): AxiosPromise<string> {
            return localVarFp.getRecordingContent(recordingId, filename, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Lists all available recordings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordings(options?: any): AxiosPromise<RecordingListResponse> {
            return localVarFp.getRecordings(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecordingApi - object-oriented interface
 * @export
 * @class RecordingApi
 * @extends {BaseAPI}
 */
export class RecordingApi extends BaseAPI {
    /**
     * 
     * @summary Deletes the recording
     * @param {string} recordingId Recording id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingApi
     */
    public deleteRecording(recordingId: string, options?: AxiosRequestConfig) {
        return RecordingApiFp(this.configuration).deleteRecording(recordingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Recording (HLS) Content
     * @param {string} recordingId Recording id
     * @param {string} filename Name of the file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingApi
     */
    public getRecordingContent(recordingId: string, filename: string, options?: AxiosRequestConfig) {
        return RecordingApiFp(this.configuration).getRecordingContent(recordingId, filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Lists all available recordings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordingApi
     */
    public getRecordings(options?: AxiosRequestConfig) {
        return RecordingApiFp(this.configuration).getRecordings(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoomApi - axios parameter creator
 * @export
 */
export const RoomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates the component and adds it to the room
         * @param {string} roomId Room ID
         * @param {AddComponentRequest} [addComponentRequest] Component config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComponent: async (roomId: string, addComponentRequest?: AddComponentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('addComponent', 'roomId', roomId)
            const localVarPath = `/room/{room_id}/component`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addComponentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create peer
         * @param {string} roomId Room id
         * @param {AddPeerRequest} [addPeerRequest] Peer specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeer: async (roomId: string, addPeerRequest?: AddPeerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('addPeer', 'roomId', roomId)
            const localVarPath = `/room/{room_id}/peer`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPeerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a room
         * @param {RoomConfig} [roomConfig] Room configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom: async (roomConfig?: RoomConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the component from the room
         * @param {string} roomId Room ID
         * @param {string} id Component ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComponent: async (roomId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deleteComponent', 'roomId', roomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteComponent', 'id', id)
            const localVarPath = `/room/{room_id}/component/{id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete peer
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeer: async (roomId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deletePeer', 'roomId', roomId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePeer', 'id', id)
            const localVarPath = `/room/{room_id}/peer/{id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the room
         * @param {string} roomId Room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('deleteRoom', 'roomId', roomId)
            const localVarPath = `/room/{room_id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show information about all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRooms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Shows information about the room
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getRoom', 'roomId', roomId)
            const localVarPath = `/room/{room_id}`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Subscribe component to the tracks of peers or components
         * @param {string} roomId Room ID
         * @param {string} componentId Component ID
         * @param {SubscriptionConfig} [subscriptionConfig] Subscribe configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeTo: async (roomId: string, componentId: string, subscriptionConfig?: SubscriptionConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('subscribeTo', 'roomId', roomId)
            // verify required parameter 'componentId' is not null or undefined
            assertParamExists('subscribeTo', 'componentId', componentId)
            const localVarPath = `/room/{room_id}/component/{component_id}/subscribe`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomApi - functional programming interface
 * @export
 */
export const RoomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates the component and adds it to the room
         * @param {string} roomId Room ID
         * @param {AddComponentRequest} [addComponentRequest] Component config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addComponent(roomId: string, addComponentRequest?: AddComponentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComponentDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addComponent(roomId, addComponentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create peer
         * @param {string} roomId Room id
         * @param {AddPeerRequest} [addPeerRequest] Peer specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPeer(roomId: string, addPeerRequest?: AddPeerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPeer(roomId, addPeerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a room
         * @param {RoomConfig} [roomConfig] Room configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoom(roomConfig?: RoomConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomCreateDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoom(roomConfig, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the component from the room
         * @param {string} roomId Room ID
         * @param {string} id Component ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteComponent(roomId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteComponent(roomId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete peer
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePeer(roomId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePeer(roomId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the room
         * @param {string} roomId Room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoom(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoom(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show information about all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRooms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomsListingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRooms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Shows information about the room
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoom(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoom(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Subscribe component to the tracks of peers or components
         * @param {string} roomId Room ID
         * @param {string} componentId Component ID
         * @param {SubscriptionConfig} [subscriptionConfig] Subscribe configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribeTo(roomId: string, componentId: string, subscriptionConfig?: SubscriptionConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribeTo(roomId, componentId, subscriptionConfig, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomApi - factory interface
 * @export
 */
export const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates the component and adds it to the room
         * @param {string} roomId Room ID
         * @param {AddComponentRequest} [addComponentRequest] Component config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComponent(roomId: string, addComponentRequest?: AddComponentRequest, options?: any): AxiosPromise<ComponentDetailsResponse> {
            return localVarFp.addComponent(roomId, addComponentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create peer
         * @param {string} roomId Room id
         * @param {AddPeerRequest} [addPeerRequest] Peer specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPeer(roomId: string, addPeerRequest?: AddPeerRequest, options?: any): AxiosPromise<PeerDetailsResponse> {
            return localVarFp.addPeer(roomId, addPeerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a room
         * @param {RoomConfig} [roomConfig] Room configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoom(roomConfig?: RoomConfig, options?: any): AxiosPromise<RoomCreateDetailsResponse> {
            return localVarFp.createRoom(roomConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the component from the room
         * @param {string} roomId Room ID
         * @param {string} id Component ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComponent(roomId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteComponent(roomId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete peer
         * @param {string} roomId Room ID
         * @param {string} id Peer id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePeer(roomId: string, id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePeer(roomId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the room
         * @param {string} roomId Room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom(roomId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show information about all rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRooms(options?: any): AxiosPromise<RoomsListingResponse> {
            return localVarFp.getAllRooms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Shows information about the room
         * @param {string} roomId Room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom(roomId: string, options?: any): AxiosPromise<RoomDetailsResponse> {
            return localVarFp.getRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Subscribe component to the tracks of peers or components
         * @param {string} roomId Room ID
         * @param {string} componentId Component ID
         * @param {SubscriptionConfig} [subscriptionConfig] Subscribe configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribeTo(roomId: string, componentId: string, subscriptionConfig?: SubscriptionConfig, options?: any): AxiosPromise<void> {
            return localVarFp.subscribeTo(roomId, componentId, subscriptionConfig, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export class RoomApi extends BaseAPI {
    /**
     * 
     * @summary Creates the component and adds it to the room
     * @param {string} roomId Room ID
     * @param {AddComponentRequest} [addComponentRequest] Component config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public addComponent(roomId: string, addComponentRequest?: AddComponentRequest, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).addComponent(roomId, addComponentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create peer
     * @param {string} roomId Room id
     * @param {AddPeerRequest} [addPeerRequest] Peer specification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public addPeer(roomId: string, addPeerRequest?: AddPeerRequest, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).addPeer(roomId, addPeerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a room
     * @param {RoomConfig} [roomConfig] Room configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public createRoom(roomConfig?: RoomConfig, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).createRoom(roomConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the component from the room
     * @param {string} roomId Room ID
     * @param {string} id Component ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public deleteComponent(roomId: string, id: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).deleteComponent(roomId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete peer
     * @param {string} roomId Room ID
     * @param {string} id Peer id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public deletePeer(roomId: string, id: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).deletePeer(roomId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the room
     * @param {string} roomId Room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public deleteRoom(roomId: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).deleteRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show information about all rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public getAllRooms(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).getAllRooms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Shows information about the room
     * @param {string} roomId Room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public getRoom(roomId: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).getRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Subscribe component to the tracks of peers or components
     * @param {string} roomId Room ID
     * @param {string} componentId Component ID
     * @param {SubscriptionConfig} [subscriptionConfig] Subscribe configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public subscribeTo(roomId: string, componentId: string, subscriptionConfig?: SubscriptionConfig, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).subscribeTo(roomId, componentId, subscriptionConfig, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SipApi - axios parameter creator
 * @export
 */
export const SipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Make a call from the SIP component to the provided phone number
         * @param {string} roomId Room ID
         * @param {string} componentId SIP Component ID
         * @param {DialConfig} [dialConfig] Phone Number configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dial: async (roomId: string, componentId: string, dialConfig?: DialConfig, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('dial', 'roomId', roomId)
            // verify required parameter 'componentId' is not null or undefined
            assertParamExists('dial', 'componentId', componentId)
            const localVarPath = `/sip/{room_id}/{component_id}/call`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dialConfig, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Finish call made by SIP component
         * @param {string} roomId Room ID
         * @param {string} componentId SIP Component ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endCall: async (roomId: string, componentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('endCall', 'roomId', roomId)
            // verify required parameter 'componentId' is not null or undefined
            assertParamExists('endCall', 'componentId', componentId)
            const localVarPath = `/sip/{room_id}/{component_id}/call`
                .replace(`{${"room_id"}}`, encodeURIComponent(String(roomId)))
                .replace(`{${"component_id"}}`, encodeURIComponent(String(componentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SipApi - functional programming interface
 * @export
 */
export const SipApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SipApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Make a call from the SIP component to the provided phone number
         * @param {string} roomId Room ID
         * @param {string} componentId SIP Component ID
         * @param {DialConfig} [dialConfig] Phone Number configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dial(roomId: string, componentId: string, dialConfig?: DialConfig, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dial(roomId, componentId, dialConfig, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Finish call made by SIP component
         * @param {string} roomId Room ID
         * @param {string} componentId SIP Component ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endCall(roomId: string, componentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endCall(roomId, componentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SipApi - factory interface
 * @export
 */
export const SipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SipApiFp(configuration)
    return {
        /**
         * 
         * @summary Make a call from the SIP component to the provided phone number
         * @param {string} roomId Room ID
         * @param {string} componentId SIP Component ID
         * @param {DialConfig} [dialConfig] Phone Number configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dial(roomId: string, componentId: string, dialConfig?: DialConfig, options?: any): AxiosPromise<void> {
            return localVarFp.dial(roomId, componentId, dialConfig, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Finish call made by SIP component
         * @param {string} roomId Room ID
         * @param {string} componentId SIP Component ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endCall(roomId: string, componentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.endCall(roomId, componentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SipApi - object-oriented interface
 * @export
 * @class SipApi
 * @extends {BaseAPI}
 */
export class SipApi extends BaseAPI {
    /**
     * 
     * @summary Make a call from the SIP component to the provided phone number
     * @param {string} roomId Room ID
     * @param {string} componentId SIP Component ID
     * @param {DialConfig} [dialConfig] Phone Number configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SipApi
     */
    public dial(roomId: string, componentId: string, dialConfig?: DialConfig, options?: AxiosRequestConfig) {
        return SipApiFp(this.configuration).dial(roomId, componentId, dialConfig, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Finish call made by SIP component
     * @param {string} roomId Room ID
     * @param {string} componentId SIP Component ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SipApi
     */
    public endCall(roomId: string, componentId: string, options?: AxiosRequestConfig) {
        return SipApiFp(this.configuration).endCall(roomId, componentId, options).then((request) => request(this.axios, this.basePath));
    }
}


